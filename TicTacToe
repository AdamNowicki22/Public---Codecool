from random import randint

def get_empty_board():
    return [ [ '.','.','.' ],[ '.','.','.' ],[ '.','.','.' ] ]

    
def ask_for_input():
    coordinates = input("Please provide position (empty field between A1 and C3): ")
    return coordinates


def is_valid_input(player_input):
    if len(player_input) ==2:
        rows = player_input[0]
        columns = player_input[1]
        coordinates = (rows, columns)
        rows = coordinates[0]
        try:
            columns = int(coordinates[1])
        except ValueError:
            columns = None
        if rows.upper()  in ['A','B','C'] and columns in range(1,4):
            return True


def check_if_position_empty(human_coordinates, player_board):
    if player_board[human_coordinates[0]][human_coordinates[1]] == '.':
        return True
    else:
        return False


def get_human_coordinates():
    coordinates = ask_for_input()
    while is_valid_input(coordinates) != True:
        coordinates = ask_for_input()
    rows_conversion_dict = {"A": 0, "B": 1, "C": 2}
    row = rows_conversion_dict[coordinates[0].upper()]
    column = int(coordinates[1])-1
    human_coordinates = (row, column)
    return human_coordinates


def is_it_X_or_O(turn_count):
    if turn_count % 2 == 1:
        return "X"
    else:
        return "O"


def display_board(player_board):
    print(
f"""
   1   2   3
A  {player_board[0][0]} | {player_board[0][1]} | {player_board[0][2]}
  ---+---+---
B  {player_board[1][0]} | {player_board[1][1]} | {player_board[1][2]}
  ---+---+---
C  {player_board[2][0]} | {player_board[2][1]} | {player_board[2][2]}
"""
)


def get_winning_player(player_board):
    for i in range (0, 3):
        if player_board[i][0] == player_board[i][1] and player_board[i][0] == player_board[i][2] and player_board[i][0] != '.':
            return True
        elif player_board[0][i] == player_board[1][i] and player_board[0][i] == player_board[2][i] and player_board[0][i] !='.':
            return True
        elif player_board[0][0] == player_board[1][1] and player_board[0][0] == player_board[2][2] and player_board[0][0] !='.':
            return True
        elif player_board[2][0] == player_board[1][1] and player_board[1][1] == player_board[0][2] and player_board[2][0] !='.':
            return True
    else:
        return None


def is_board_full(player_board):
    for i in range(0,3):
        if '.' in player_board[i]:
            return False
    return True


def game():
    game_board = get_empty_board()
    turn_count = 1
    display_board(game_board)
    while is_board_full(game_board) == False and get_winning_player(game_board) == None:
        coordinates = get_human_coordinates()
        while check_if_position_empty(coordinates, game_board) == False:
            coordinates = get_human_coordinates()
        game_board[coordinates[0]][coordinates[1]] = is_it_X_or_O(turn_count)     
        display_board(game_board)
        if get_winning_player(game_board) == True:
            print(f'Player {is_it_X_or_O(turn_count)} has won')
            break
        elif is_board_full(game_board) == True:
            print("The game ended with tie")
            break
        turn_count +=1

game()


def ai_random_move(player_board):
    ai_move = ((randint(0 ,2)), randint(0, 2))
    while check_if_position_empty(ai_move, player_board) == False:
        ai_move = ((randint(0 ,2)), randint(0, 2))
    else:
        return ai_move

def game_ai1():
    game_board = get_empty_board()
    turn_count = 1
    display_board(game_board)
    while is_board_full(game_board) == False and get_winning_player(game_board) == None:
        coordinates = get_human_coordinates()
        while check_if_position_empty(coordinates, game_board) == False:
            coordinates = get_human_coordinates()
        game_board[coordinates[0]][coordinates[1]] = is_it_X_or_O(turn_count)     
        display_board(game_board)
        turn_count +=1
        ai_coordinates = ai_random_move(game_board)
        game_board[ai_coordinates[0]][ai_coordinates[1]] = is_it_X_or_O(turn_count)
        display_board(game_board)
        if get_winning_player(game_board) == True:
            print(f'Player {is_it_X_or_O(turn_count)} has won')
            break
        elif is_board_full(game_board) == True:
            print("The game ended with tie")
            break
        turn_count +=1

def get_winning_ai_move(player_board, turn_count):
    ai_board = player_board
    for i in range(0,3):
        for j in range(0,3):
            if ai_board[i][j] == '.':
                ai_board[i][j] = is_it_X_or_O(turn_count)
                if get_winning_player(ai_board) == True:
                    return (i, j)
                else:
                    ai_board[i][j] = '.'

def game_ai2():
    game_board = get_empty_board()
    turn_count = 1
    display_board(game_board)
    while is_board_full(game_board) == False and get_winning_player(game_board) == None:
        coordinates = get_human_coordinates()
        while check_if_position_empty(coordinates, game_board) == False:
            coordinates = get_human_coordinates()
        game_board[coordinates[0]][coordinates[1]] = is_it_X_or_O(turn_count)     
        display_board(game_board)
        turn_count +=1
        if get_winning_ai_move(game_board, turn_count)!= None:
            ai_coordinates = get_winning_ai_move(game_board, turn_count)
        else:
            ai_coordinates = ai_random_move(game_board)
        game_board[ai_coordinates[0]][ai_coordinates[1]] = is_it_X_or_O(turn_count)
        display_board(game_board)
        if get_winning_player(game_board) == True:
            print(f'Player {is_it_X_or_O(turn_count)} has won')
            break
        elif is_board_full(game_board) == True:
            print("The game ended with tie")
            break
        turn_count +=1
