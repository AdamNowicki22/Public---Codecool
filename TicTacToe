def get_empty_board():
    return [ [ '.','.','.' ],[ '.','.','.' ],[ '.','.','.' ] ]

#print(get_empty_board()[2][0])
    
def ask_for_input():
    coordinates = input("Please provide position (empty field between A1 and C3): ")
    return coordinates

def is_valid_input(player_input):
    if len(player_input) ==2:
        rows = player_input[0]
        columns = player_input[1]
        coordinates = (rows, columns)
        rows = coordinates[0]
        try:
            columns = int(coordinates[1])
        except ValueError:
            columns = None
        if rows.upper()  in ['A','B','C'] and columns in range(1,4):
            return True


def check_if_position_empty(human_coordinates, player_board):
    if player_board[human_coordinates[0]][human_coordinates[1]] == '.':
        return True
    else:
        return False


def get_human_coordinates():
    coordinates = ask_for_input()
    while is_valid_input(coordinates) != True:
        coordinates = ask_for_input()
    else:
        rows_conversion_dict = {"A": 0, "B": 1, "C": 2}
        row = rows_conversion_dict[coordinates[0].upper()]
        column = int(coordinates[1])-1 #-1, so it counts from 0
        human_coordinates = (row, column)
        return human_coordinates


def is_it_X_or_O(turn_count):
    if turn_count % 2 == 1:
        return "X"
    else:
        return "O"


# player_board = [ [ 'Y','X','Y' ],[ 'X','Y','X' ],[ 'Y','X','X' ] ]
# player_board = [ [ 'X','X','X' ],[ 'X','.','.' ],[ 'X','.','.' ] ]


#print(get_empty_board()[2][0])

def display_board(player_board):
    print(
f"""
   1   2   3
A  {player_board[0][0]} | {player_board[0][1]} | {player_board[0][2]}
  ---+---+---
B  {player_board[1][0]} | {player_board[1][1]} | {player_board[1][2]}
  ---+---+---
C  {player_board[2][0]} | {player_board[2][1]} | {player_board[2][2]}
"""
)

def get_winning_player(player_board):
    for i in range (0, 3):
        for j in range (0, 3):
            if player_board[i][0] == player_board[i][1] and player_board[i][0] == player_board[i][2] and player_board[i][0] != '.':
                return(f'Player {player_board[i][0]} won')
            elif player_board[0][j] == player_board[1][j] and player_board[0][j] == player_board[2][j] and player_board[0][j] !='.':
                return(f'Player {player_board[0][j]} won')
            elif player_board[0][0] == player_board[1][1] and player_board[0][0] == player_board[2][2] and player_board[0][0] !='.':
                return (f'Player {player_board[1][1]} won')
            elif player_board[2][0] == player_board[1][1] and player_board[1][1] == player_board[0][2] and player_board[2][0] !='.':
                return (f'Player {player_board[1][1]} won')
    else:
        return False



def is_board_full(player_board):
    check_for_full = []
    for i in range(0,3):
        for j in range(0,3):
            check_for_full.append(player_board[i][j])
    if '.' in check_for_full:
        return False
    else:
        return True

def ask_player_name():
    player_name = input('Please provide player name, type AI to play against AI: ')
    if player_name == 'AI':
        return False
    else:
        return player_name

def game():
    game_board = get_empty_board()
    turn_count = 1
    display_board(game_board)
    while is_board_full(game_board) == False and get_winning_player(game_board) == False:
        cordinates = get_human_coordinates()
        while check_if_position_empty(cordinates, game_board) == False:
            cordinates = get_human_coordinates()
        else:
            game_board[cordinates[0]][cordinates[1]] = is_it_X_or_O(turn_count)
            turn_count +=1
            display_board(game_board)
            if get_winning_player(game_board) != False:
                print(get_winning_player(game_board))
                break
            elif is_board_full(game_board) == True:
                print("The game ended with draw")
                break

game()
